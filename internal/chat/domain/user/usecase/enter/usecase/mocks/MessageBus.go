// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	message "github.com/vdrpkv/goexamples/internal/chat/domain/message"

	session "github.com/vdrpkv/goexamples/internal/chat/domain/session"
)

// MessageBus is an autogenerated mock type for the MessageBus type
type MessageBus struct {
	mock.Mock
}

// SubscribeForNewMessages provides a mock function with given fields: ctx, sessionID
func (_m *MessageBus) SubscribeForNewMessages(ctx context.Context, sessionID session.ID) (<-chan *message.Entity, error) {
	ret := _m.Called(ctx, sessionID)

	var r0 <-chan *message.Entity
	if rf, ok := ret.Get(0).(func(context.Context, session.ID) <-chan *message.Entity); ok {
		r0 = rf(ctx, sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *message.Entity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, session.ID) error); ok {
		r1 = rf(ctx, sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMessageBus interface {
	mock.TestingT
	Cleanup(func())
}

// NewMessageBus creates a new instance of MessageBus. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMessageBus(t mockConstructorTestingTNewMessageBus) *MessageBus {
	mock := &MessageBus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
